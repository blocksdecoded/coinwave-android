apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

afterEvaluate {
    buildFabricPropertiesIfNeeded()
}

android {
    def STRING = "String"
    def COMPANY_URL = "COMPANY_URL"
    def CONTACT_EMAIL = "CONTACT_EMAIL"
    def SHARE_LINK = "SHARE_LINK"

    compileSdkVersion target_sdk_version
    defaultConfig {
        applicationId "com.blocksdecoded.coinwave"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 13
        versionName "1.0.1"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField STRING, COMPANY_URL, properties.getProperty("company_url", "\"\"")
        buildConfigField STRING, CONTACT_EMAIL, properties.getProperty("contact_email", "\"\"")
        buildConfigField STRING, SHARE_LINK, properties.getProperty("share_link", "\"\"")
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }

        release {
            storeFile file(properties.getProperty("keystore", "path_to_kestore_file"))
            storePassword properties.getProperty("keystore_pass", "your_keystore_pass")
            keyAlias properties.getProperty("key_alias", "your_key_alias")
            keyPassword properties.getProperty("key_pass", "your_key_pass")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }

        staging {
            initWith debug
            debuggable false
            applicationIdSuffix '.staging'
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            useProguard false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"
    }

    sourceSets { main.java.srcDirs += 'src/main/kotlin' }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "cw_${variant.buildType.name}_${defaultConfig.versionName}(${defaultConfig.versionCode}).apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

apply from: "dependencies.gradle"

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation project(':rateus')
    
    implementation supportLibs
    implementation networkLibs
    implementation rxJavaLibs
    implementation coroutineLibs
    implementation otherLibs

    debugImplementation debugLibs
    stagingImplementation releaseLibs
    releaseImplementation releaseLibs

    kapt annotationProcessorLibs

    implementation(glideOkhttp) {
        exclude group: 'glide-parent'
    }

    // Fabric
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }

    testImplementation unitTestLibs
}

def buildFabricPropertiesIfNeeded() {
    def propertiesFile = file("fabric.properties")
    def localProperties = new Properties()
    if (project.rootProject.file('local.properties').exists()) {
        localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    }

    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiKey", value: localProperties.getProperty("fabric_api_key", "0"))
        }
    }
}